from asgiref.sync import sync_to_async
from .models.TelegramBot import TelegramUser, Channel, CompanyData
import os
import re
from openai import AsyncOpenAI


async def save_user_to_db(data):
    user_id = data.id
    first_name = data.first_name
    username = data.username

    try:
        # Wrap the ORM operation with sync_to_async
        @sync_to_async
        def update_or_create_user():
            return TelegramUser.objects.update_or_create(
                user_id=user_id,  # Modeldagi `telegram_id` maydoniga moslashtirildi
                defaults={
                    "first_name": first_name,
                    "username": username,
                },
            )

        user, created = await update_or_create_user()
        return True
    except Exception as error:
        print(f"Error saving user to DB: {error}")
        return False


@sync_to_async
def create_channel(chat_id, chat_name: str, chat_type: str, url=None):
    channel = Channel.objects.create(
        channel_id=chat_id, name=chat_name, type=chat_type, url=url
    )
    return channel




OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = AsyncOpenAI(api_key=OPENAI_API_KEY)

from difflib import SequenceMatcher

# üß† Bazadagi eng o‚Äòxshash ma‚Äôlumotlarni olish
import numpy as np
from openai import AsyncOpenAI
from asgiref.sync import sync_to_async
from .models.TelegramBot import CompanyData
import os

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# üßÆ Kosinus o‚Äòxshashligini hisoblash
def cosine_similarity(a, b):
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))
    

@sync_to_async
def get_top_similar_data(user_vector, top_k=5):
    """Embedding asosida bazadan eng o‚Äòxshash ma‚Äôlumotlarni olish"""
    datas = CompanyData.objects.exclude(embedding=None).values("id", "content", "embedding")
    scored = []

    for d in datas:
        emb = np.array(d["embedding"])
        sim = cosine_similarity(user_vector, emb)
        scored.append((sim, d["content"]))

    # Eng o‚Äòxshash top_k ta ma‚Äôlumotni qaytarish
    top_matches = sorted(scored, key=lambda x: x[0], reverse=True)[:top_k]
    return "\n\n".join([m[1] for m in top_matches])



# # üí¨ AI asosida javob generatsiya qilish
# async def generate_ai_response(user_message: str):
#     similar_data = await get_top_similar_data(user_message)

#     # üîç agar o‚Äòxshash ma‚Äôlumot topilsa ‚Äî shuni yuboramiz
#     if similar_data:
#         company_info = "\n\n".join(similar_data)
#         context_info = f"üßæ Kompaniya haqida mos ma‚Äôlumotlar:\n{company_info}"
#     else:
#         context_info = "‚ö†Ô∏è Hech qanday mos ma‚Äôlumot topilmadi."

#     # üß† AI uchun kontekstli prompt
#     prompt = f"""
# Siz Rizo Go kompaniyasi uchun mo‚Äòljallangan virtual yordamchisiz.
# Faqat kompaniya faoliyati, xizmatlari, narxlari, joylashuvi, haydovchilar, mijozlarga xizmat, buyurtma berish kabi mavzularga oid savollarga javob bering.

# Agar foydalanuvchi salomlashsa, shunday javob qaytaring:
# Siz ham muloyimlik bilan salomlashing

# Agar foydalanuvchi savoli Rizo Go kompaniyaga aloqador bo‚Äòlmasa yoki quyidagi ma‚Äôlumotlarda javob topilmasa,
# unga muloyim tarzda telegram admini @Rizogo_Support bilan bog‚Äòlanishini ayting.

# Foydalanuvchiga yordam berishga harakat qiling, lekin faqat kompaniya bilan bog‚Äòliq mavzularda javob bering.

# Foydalanuvchi qaysi tilda savol bersa o'sh tilda javob bering, ingiliz tilida savol bersa ingiliz tilida, o'zbek tilida bersa o'zbek tilida, rus tilida bersa rus tilida.

# Javobingiz qisqa va aniq bo‚Äòlsin.

# {context_info}
# """

#     # üß© ChatGPT‚Äôdan javob olish
#     response = await client.chat.completions.create(
#         model="gpt-4o-mini",  # yoki 3.5-turbo, yoki 4o agar byudjet bo‚Äòlsa
#         messages=[
#             {"role": "system", "content": prompt},
#             {"role": "user", "content": user_message},
#         ],
#         max_tokens=300,
#         temperature=0.3,
#     )

#     return response.choices[0].message.content.strip()


async def generate_ai_response(user_message: str):
    """AI asosida kontekstli javob yaratish"""
    
    # 1Ô∏è‚É£ User so‚Äòrovini embeddingga o‚Äògiramiz
    embedding_response = await client.embeddings.create(
        model="text-embedding-3-small",
        input=user_message,
    )
    user_vector = np.array(embedding_response.data[0].embedding)

    # 2Ô∏è‚É£ Bazadan eng o‚Äòxshash ma‚Äôlumotlarni olish
    similar_info = await get_top_similar_data(user_vector, top_k=5)

    # 3Ô∏è‚É£ AI uchun kontekstli prompt
    prompt = f"""
Siz Rizo Go kompaniyasi uchun mo‚Äòljallangan virtual yordamchisiz.
Faqat kompaniya faoliyati, xizmatlari, narxlari, joylashuvi, haydovchilar, mijozlarga xizmat, buyurtma berish kabi mavzularga oid savollarga javob bering.

Agar foydalanuvchi salomlashsa, shunday javob qaytaring:
Siz ham muloyimlik bilan salomlashing

Agar foydalanuvchi savoli Rizo Go kompaniyaga aloqador bo‚Äòlmasa yoki quyidagi ma‚Äôlumotlarda javob topilmasa,
unga muloyim tarzda telegram admini @Rizogo_Support bilan bog‚Äòlanishini ayting.

Foydalanuvchiga yordam berishga harakat qiling, lekin faqat kompaniya bilan bog‚Äòliq mavzularda javob bering.

Foydalanuvchi qaysi tilda savol bersa o'sh tilda javob bering, ingiliz tilida savol bersa ingiliz tilida, o'zbek tilida bersa o'zbek tilida, rus tilida bersa rus tilida.

Javobingiz qisqa va aniq bo‚Äòlsin.

{similar_info if similar_info else 'Bu savol bo‚Äòyicha ma‚Äôlumot topilmadi. Iltimos, @Rizogo_Support bilan bog‚Äòlanishini ayting.'}
"""

    # 4Ô∏è‚É£ AI javobini olish
    response = await client.chat.completions.create(
        model="gpt-4o-mini",  # yoki 3.5-turbo agar arzonroq bo‚Äòlishi kerak bo‚Äòlsa
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": user_message},
        ],
        max_tokens=300,
        temperature=0.4,
    )

    return response.choices[0].message.content.strip()

